name: Build, Test, and E2E Test

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  determine-tests:
    runs-on: ubuntu-latest
    outputs:
      run-full-matrix: ${{ steps.check-branch.outputs.run-full-matrix }}
    steps:
      - id: check-branch
        run: |
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop") ]]; then
            echo "run-full-matrix=true" >> $GITHUB_OUTPUT
          else
            echo "run-full-matrix=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    needs: determine-tests
    name: Build and Test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.12"
          - os: windows-latest
            python-version: "3.12"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc make valgrind

      - name: Install Make on Windows
        if: runner.os == 'Windows'
        run: |
          choco install make -y
          echo "Make installed on Windows."
        shell: cmd

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv bindings_venv
          if [ "${{ runner.os }}" == "Windows" ]; then
            call bindings_venv\Scripts\activate.bat
          else
            source bindings_venv/bin/activate
          fi
          pip install --upgrade pip setuptools wheel
          pip install --prefer-binary .
        shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

      - name: Build project
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            call bindings_venv\Scripts\activate.bat
          else
            source bindings_venv/bin/activate
          fi
          make -j all
        shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

      - name: Build wheel
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            call bindings_venv\Scripts\activate.bat
          else
            source bindings_venv/bin/activate
          fi
          make wheel
        shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

      - name: Run E2E tests
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            call bindings_venv\Scripts\activate.bat
          else
            source bindings_venv/bin/activate
          fi
          make test
        shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl

  full-matrix-test:
    needs: determine-tests
    if: needs.determine-tests.outputs.run-full-matrix == 'true'
    name: Full Matrix Test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.12"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc make valgrind

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install gcc make valgrind

      - name: Install Make on macOS
        if: runner.os == 'macOS'
        run: |
          brew install make
        shell: bash

      - name: Set up virtual environment and install dependencies
        run: |
          python -m venv bindings_venv
          if [ "${{ runner.os }}" == "Windows" ]; then
            call bindings_venv\Scripts\activate.bat
          else
            source bindings_venv/bin/activate
          fi
          pip install --upgrade pip setuptools wheel
          pip install --prefer-binary .
        shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

      - name: Build project
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            call bindings_venv\Scripts\activate.bat
          else
            source bindings_venv/bin/activate
          fi
          make -j all
        shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

      - name: Build wheel
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            call bindings_venv\Scripts\activate.bat
          else
            source bindings_venv/bin/activate
          fi
          make wheel
        shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

      - name: Run E2E tests
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            call bindings_venv\Scripts\activate.bat
          else
            source bindings_venv/bin/activate
          fi
          make test
        shell: ${{ runner.os == 'Windows' && 'cmd' || 'bash' }}

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl
