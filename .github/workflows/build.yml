name: Build and Test

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install Python linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
      - name: Run Python linters
        run: |
          flake8 .
          black --check .
          isort --check-only .
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Run Rust linters
        run: |
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings

  test_python:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load cached pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions coverage
      - name: Load cached tox
        uses: actions/cache@v3
        with:
          path: .tox
          key: ${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ matrix.python-version }}
      - name: Run Python tests
        run: tox
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: python

  test_rust:
    name: Test Rust on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Display Cargo.toml contents
        run: cat rust_code/Cargo.toml
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust_code/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust_code/**/Cargo.lock') }}
      - name: Run Rust tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path rust_code/Cargo.toml --all --verbose
      - name: Generate coverage report
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: "0.15.0"
          args: "--manifest-path rust_code/Cargo.toml --out Xml"
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: rust

  build:
    name: Build and package
    needs: [lint, test_python, test_rust]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
      - name: Build Python package
        run: python -m build
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Build Rust package
        run: cargo build --release --manifest-path rust_code/Cargo.toml
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist
            rust_code/target/release
