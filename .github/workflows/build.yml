name: Build, Test, and E2E Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.12"
          - os: windows-2022
            python-version: "3.12"

    runs-on: ${{ matrix.os }}

    steps:
      # Checkout the repository.
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up the Python version.
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache both pip and Python virtual environment for faster installs.
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            bindings_venv
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}

      # Install system dependencies for Linux.
      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc make valgrind

      # Install system dependencies for macOS.
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc make

      # Install additional dependencies for Windows.
      - name: Install additional dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "No additional system dependencies needed for Windows."

      # Upgrade pip and install your package dependencies inside a virtual environment.
      - name: Set up virtual environment (Linux and macOS)
        if: runner.os != 'Windows'
        run: |
          python -m venv bindings_venv
          source bindings_venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install --prefer-binary .
        shell: bash

      # Upgrade pip and install your package dependencies inside a virtual environment (Windows).
      - name: Set up virtual environment (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m venv bindings_venv
          bindings_venv\Scripts\activate
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --prefer-binary .
        shell: cmd

      # Build the project using parallel jobs with `make -j` (Linux and macOS).
      - name: Build project (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source bindings_venv/bin/activate
          make -j all
        shell: bash

      # Build the project using parallel jobs with `make -j` (Windows).
      - name: Build project (Windows)
        if: runner.os == 'Windows'
        run: |
          bindings_venv\Scripts\activate
          make -j all
        shell: cmd

      # Build the Python wheel (Linux and macOS).
      - name: Build wheel (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source bindings_venv/bin/activate
          make wheel
        shell: bash

      # Build the Python wheel (Windows).
      - name: Build wheel (Windows)
        if: runner.os == 'Windows'
        run: |
          bindings_venv\Scripts\activate
          make wheel
        shell: cmd

      # Run E2E tests and check for memory leaks (Valgrind on Linux, leaks on macOS).
      - name: Run E2E tests (includes memory checks) (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source bindings_venv/bin/activate
          make test
        shell: bash

      # Run E2E tests and check for memory leaks (Windows).
      - name: Run E2E tests (includes memory checks) (Windows)
        if: runner.os == 'Windows'
        run: |
          bindings_venv\Scripts\activate
          make test
        shell: cmd

      # Upload the generated wheel file as an artifact.
      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl
